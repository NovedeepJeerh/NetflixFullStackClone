{"version":3,"sources":["axios.js","Requests.js","Banner.js","Nav.js","Row.js","HomeScreen.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchNetflixOriginals","fetchNowPlaying","fetchTrending","fetchTopRated","fetchPopular","fetchUpcoming","fetchActionMovies","fetchComedyMovies","fetchRomanceMovies","fetchHorrorMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","transitionNavBar","window","scrollY","addEventListener","removeEventListener","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","alert","handleClick","poster_path","id","videoId","opts","height","width","playerVars","autoplay","HomeScreen","App","counterSlice","createSlice","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ce2c63d.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance =  axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","//TYpically we would store in {process.env.API_KEY}\r\nconst API_KEY = 'bc367e722a60991e80555c78c2e58e72';\r\n\r\nconst requests = {\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&language=en-US`,\r\n  fetchNowPlaying: `/now_playing/movie/day?api_key=${API_KEY}`,\r\n  fetchTrending: `/trending/movie/day?api_key=${API_KEY}`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchPopular: `/movie/popular?api_key=${API_KEY}&language=en-US`,\r\n  fetchUpcoming: `/movie/upcoming?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useEffect , useState } from \"react\";\r\nimport \"./Banner.css\";\r\nimport axios from\"./axios\";\r\nimport requests from \"./Requests\";\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n          }\r\n\r\n          fetchData();\r\n     }, []);\r\n\r\n \r\n\r\n    function truncate(string, n){\r\n        return string?.length > n ? string.substr(0, n-1) + \"...\" : string;\r\n    }\r\n\r\n    return ( \r\n    <header \r\n       className=\"banner\" \r\n       style={{\r\n        backgroundSize:\"cover\",\r\n           backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n           backgroundPosition:\"top center\",\r\n    }}>\r\n        <div className=\"banner__contents\">\r\n            <h1 className=\"banner__title\">\r\n                {movie?.title|| movie?.name || movie?.original_name}\r\n                \r\n            </h1>\r\n            <div className = \"banner__buttons\">\r\n                <button className=\"banner__button\">Play</button>\r\n                <button className=\"banner__button\">My List</button>\r\n            </div>\r\n            <h1 className=\"banner__description\">\r\n                {truncate(`${movie?.overview}`, 150)}</h1>\r\n        </div>\r\n\r\n        < div className=\"banner--fadeBottom\"></div>\r\n    </header>\r\n    );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState , useEffect } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    const transitionNavBar = () => {\r\n        if(window.scrollY > 100) {\r\n            handleShow(true);\r\n        } else {\r\n            handleShow(false);\r\n        }\r\n    };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", transitionNavBar);\r\n    return () => window.removeEventListener(\"scroll\", transitionNavBar);\r\n   }, []);\r\n\r\n    return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n       <div className=\"nav__contents\">\r\n        <img \r\n        className=\"nav__logo\"\r\n        src = \"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" />\r\n        \r\n        <img \r\n        className=\"nav__avatar\"\r\n        src =\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"\" />\r\n\r\n    </div>\r\n    </div>\r\n    );   \r\n}\r\n\r\nexport default Nav;\r\n ","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results); \r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => alert(\"there is no trailer for this movie\"));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport Banner from './Banner';\r\nimport \"./HomeScreen.css\";\r\nimport Nav from \"./Nav\";\r\nimport requests from './Requests';\r\nimport Row from \"./Row\";\r\n \r\nfunction HomeScreen() {\r\n    return (\r\n        <div className=\"homeScreen\">\r\n            <Nav />\r\n\r\n            <Banner />\r\n\r\n            <Row \r\n            title='NETFLIX ORIGINALS'\r\n            fetchUrl={requests.fetchNetflixOriginals}\r\n            isLargeRow\r\n            />\r\n            <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n            <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n            <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n            <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n            <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\r\n            <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\r\n            <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n            \r\n            </div>\r\n    );\r\n}\r\nexport default HomeScreen;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport HomeScreen from \"./HomeScreen\";\r\nimport \"./HomeScreen.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <HomeScreen />\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}